#!/bin/bash

### BEGIN INIT INFO
# Provides:          unicorn_rails
# Required-Start:    $local_fs $syslog
# Required-Stop:     $syslog $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start and stop unicorn_rails process
# Description:       Start and stop unicorn_rails process
### END INIT INFO

## Author: Arthur Furlan <afurlan@confi.gr>


##
## WARNING:
## This file was automatically generarated and is activelly maintained by CONFIGR.
## While it can still be managed manually, it is definitevly not recomended. Please
## use the CONFIGR's web interface to manage this file and its respective services.
##

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="generic unicorn_rails initscript"
NAME="unicorn_rails"
DAEMON=/usr/local/bin/bundle
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
DAEMON_PATH=$DAEMON

## read global configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

## load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

## define LSB log_* functions.
## depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

_do_start_project()
{
    CONF=$(basename $1)

    ## return:
    ##   3 if configuration file does not exist
    [ ! -r /etc/unicorn_rails.d/$CONF ] && return 3

    ## read project configuration variable file
    . /etc/unicorn_rails.d/$CONF

    ## stop the service if it's actually running
    [ -f $PIDFILE ] && _do_stop_project $1

    ## return:
    ##   0 if daemon has been started
    ##   1 if daemon was already running
    ##   2 if daemon could not be started
    cd $ROOTAPP && su -c "$DAEMON_PATH exec unicorn_rails -c $UNICORN -D -E $RAILS_ENV > /dev/null" www-data
}

_do_stop_project()
{
    CONF=$(basename $1)

    ## return:
    ##   3 if configuration file does not exist
    [ ! -r /etc/unicorn_rails.d/$CONF ] && return 3

    ## read project configuration variable file
    . /etc/unicorn_rails.d/$CONF

    ## return:
    ##   0 if daemon has been stopped
    ##   1 if daemon was already stopped
    ##   2 if daemon could not be stopped
    ##   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE > /dev/null
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    # Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE
    return "$RETVAL"
}

_do_status_project()
{
    CONF=$(basename $1)
    FQDN=$(echo $CONF | sed 's/\.conf$//')

    ## return:
    ##   3 if configuration file does not exist
    [ ! -r /etc/unicorn_rails.d/$CONF ] && return 3

    ## read project configuration variable file
    . /etc/unicorn_rails.d/$CONF

    ## stop the service if it's actually running
    [ ! -f $PIDFILE ] && return 1

    echo "unicorn_rails running for application '$FQDN'..."
}

do_start()
{
    ## start specific projects if specified
    if [ $# -gt 1 ]; then

        shift
        for PROJECT in $@; do
            _do_start_project $PROJECT.conf
        done

    ## ... or start all available projects
    else

        for PROJECT in /etc/unicorn_rails.d/*; do
            _do_start_project $PROJECT
        done

    fi
}

do_stop()
{
    ## start specific projects if specified
    if [ $# -gt 1 ]; then

	shift
        for PROJECT in $@; do
            _do_stop_project $PROJECT.conf
        done

    ## ... or start all available projects
    else

        for PROJECT in /etc/unicorn_rails.d/*; do
            _do_stop_project $PROJECT
        done

    fi
}

do_status()
{
    ## statu specific projects if specified
    if [ $# -gt 1 ]; then

        shift
        for PROJECT in $@; do
            _do_status_project $PROJECT.conf
        done

    ## ... or start all available projects
    else

        for PROJECT in /etc/unicorn_rails.d/*; do
            _do_status_project $PROJECT
        done

    fi
}

case "$1" in
  start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start $@
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
  stop)
       [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop $@
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
  status)
        do_status $@
        ;;
  restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop $@
        case "$?" in
          0|1)
                do_start $@
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; ## old process is still running
                        *) log_end_msg 1 ;; ## failed to start
                esac
                ;;
          *)
                ## failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
  *)
        echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload} [ project-list ]" >&2
        exit 3
        ;;
esac
